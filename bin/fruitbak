#! /usr/bin/env python3

from fruitbak import Fruitbak

from os import fsdecode
from sys import stdout as text_stdout, stderr
from pathlib import Path

import click
import gc, atexit

stdout = text_stdout.buffer

def check_for_loops():
	if gc.collect() != 0:
		print("W: reference loops at program exit!", file = stderr)

@click.group()
def cli(): pass

@cli.command()
@click.argument('host', required = False)
@click.argument('backup', required = False)
@click.argument('share', required = False)
@click.argument('path', required = False, default = '')
def ls(host, backup, share, path):
	"""Lists hosts, backups, shares and paths"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	if host is None:
		for h in fbak:
			print(h.name)
	elif backup is None:
		for b in fbak[host]:
			print(b.index)
	elif share is None:
		for s in fbak[host][backup]:
			print(s.name)
	else:
		for dentry in fbak[host][backup][share].ls(path):
			print(fsdecode(dentry.name))

@cli.command()
@click.argument('host')
@click.argument('backup')
@click.argument('share')
@click.argument('path')
def cat(host, backup, share, path):
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	dentry = fbak[host][backup][share][path]
	digests = dentry.digests
	hashsize = fbak.hashsize
	def digestiterator(digests):
		offset = 0
		length = len(digests)
		while offset < length:
			next_offset = offset + hashsize
			yield digests[offset:next_offset]
			offset = next_offset
	with fbak.pool.agent().readahead(digestiterator(digests)) as reader:
		for action in reader:
			stdout.write(action.value)

@cli.command()
def pooltest():
	"""Run some tests on the pool code"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	hashfunc = fbak.hashfunc

	def readahead():
		for i in range(200):
			yield hashfunc(str(i).encode())

	pool = fbak.pool
	agent = pool.agent()
	reader = agent.readahead(readahead())

	agent.put_chunk(hashfunc(b'foo'), b'foo', async = True)

	print("get_chunk:", agent.get_chunk(hashfunc(b'foo')))

	action = agent.get_chunk(hashfunc(b'foo'), async = True)

	print("async get_chunk:", action.sync())

	for i in range(200):
		data = str(i).encode()
		agent.put_chunk(hashfunc(data), data, async = True)

	agent.sync()

	print("derp")

	for action in reader:
		if action.exception:
			exceptiontype, exception, backtrace = action.exception
			raise exception
		print("readahead:", action.value)

	reader = None
	print(len(agent.readaheads))
	agent = None
	print(len(pool.agents))
	fbak = None

@cli.command()
def xyzzy():
	"""Nothing happens"""

if __name__ == '__main__':
	cli()
