#! /usr/bin/env python3

from fruitbak import Fruitbak

from os import fsdecode
from sys import stdout as text_stdout, stderr
from pathlib import Path
from tarfile import TarInfo, REGTYPE, LNKTYPE, SYMTYPE, CHRTYPE, BLKTYPE, DIRTYPE, FIFOTYPE, GNU_FORMAT, BLOCKSIZE
from time import sleep

import click
import gc, atexit

stdout = text_stdout.buffer

def check_for_loops():
	if gc.collect() != 0:
		print("W: reference loops at program exit!", file = stderr)

@click.group()
def cli(): pass

@cli.command()
@click.argument('host', required = False)
@click.argument('backup', required = False)
@click.argument('share', required = False)
@click.argument('path', required = False, default = '')
def ls(host, backup, share, path):
	"""Lists hosts, backups, shares and paths"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	if host is None:
		for h in fbak:
			print(h.name)
	elif backup is None:
		for b in fbak[host]:
			print(b.index)
	elif share is None:
		for s in fbak[host][backup]:
			print(s.name)
	else:
		for dentry in fbak[host][backup][share].ls(path):
			print(fsdecode(dentry.name))

@cli.command()
@click.argument('host')
@click.argument('backup')
@click.argument('share')
@click.argument('path')
def cat(host, backup, share, path):
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	dentry = fbak[host][backup][share][path]
	with fbak.pool.agent().readahead(dentry.digests) as reader:
		for action in reader:
			stdout.write(action.value)

@cli.command()
@click.argument('host')
@click.argument('backup')
@click.argument('share')
@click.argument('path')
def tar(host, backup, share, path):
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	share = fbak[host][backup][share]

	def iterator():
		for dentry in share.find(path):
			if dentry.is_file and not dentry.is_hardlink:
				yield from dentry.digests

	with fbak.pool.agent().readahead(iterator()) as reader:
		for dentry in share.find(path):
			i = TarInfo(fsdecode(bytes(dentry.name)))
			i.mode = dentry.mode & 0o7777
			i.uid = dentry.uid
			i.gid = dentry.gid
			i.mtime = dentry.mtime // 1000000000
			if dentry.is_hardlink:
				i.type = LNKTYPE
				i.linkname = fsdecode(bytes(dentry.hardlink))
			elif dentry.is_file:
				i.type = REGTYPE
				i.size = dentry.size
			elif dentry.is_symlink:
				i.type = SYMTYPE
				i.linkname = fsdecode(bytes(dentry.symlink))
			elif dentry.is_chardev:
				i.type = CHRTYPE
				i.devmajor = dentry.major
				i.devminor = dentry.minor
			elif dentry.is_blockdev:
				i.type = BLKTYPE
				i.devmajor = dentry.major
				i.devminor = dentry.minor
			elif dentry.is_directory:
				i.type = DIRTYPE
			elif dentry.is_fifo:
				i.type = FIFOTYPE
			else:
				continue

			stdout.write(i.tobuf(GNU_FORMAT))

			if dentry.is_file and not dentry.is_hardlink:
				for digest in dentry.digests:
					action = next(reader)
					if action.exception:
						raise action.exception
					stdout.write(action.value)
				padding = -i.size % BLOCKSIZE
				if padding:
					stdout.write(b'\0' * padding)

	stdout.write(b'\0' * (BLOCKSIZE*2))

@cli.command()
def pooltest():
	"""Run some tests on the pool code"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	hashfunc = fbak.hashfunc

	def readahead():
		for i in range(200):
			yield hashfunc(str(i).encode())

	pool = fbak.pool
	agent = pool.agent()
	reader = agent.readahead(readahead())

	agent.put_chunk(hashfunc(b'foo'), b'foo', async = True)

	print("get_chunk:", agent.get_chunk(hashfunc(b'foo')))

	action = agent.get_chunk(hashfunc(b'foo'), async = True)

	print("async get_chunk:", action.sync())

	for i in range(200):
		data = str(i).encode()
		agent.put_chunk(hashfunc(data), data, async = True)

	agent.sync()

	print("derp")

	for action in reader:
		if action.exception:
			exceptiontype, exception, backtrace = action.exception
			raise exception
		print("readahead:", action.value)

	reader = None
	print(len(agent.readaheads))
	agent = None
	print(len(pool.agents))
	fbak = None

@cli.command()
def fstest():
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	data = "derp".encode()
	hashfunc = fbak.hashfunc
	fbak.pool.agent().put_chunk(hashfunc(data), data)
	sleep(1)

@cli.command()
def xyzzy():
	"""Nothing happens"""

if __name__ == '__main__':
	cli()
