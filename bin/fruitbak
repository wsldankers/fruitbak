#! /usr/bin/env python3

from fruitbak import Fruitbak
from fruitbak.util.tabulate import tabulate

from os import fsdecode
from sys import stdout as text_stdout, stderr, setswitchinterval
from pathlib import Path
from tarfile import TarInfo, REGTYPE, LNKTYPE, SYMTYPE, CHRTYPE, BLKTYPE, DIRTYPE, FIFOTYPE, GNU_FORMAT, BLOCKSIZE
from time import sleep, localtime, strftime
from concurrent.futures import ThreadPoolExecutor

import click
import gc, atexit

def check_for_loops():
	if gc.collect() != 0:
		print("W: reference loops at program exit!", file = stderr)

@click.group()
def cli(): pass

@cli.command()
@click.argument('host', required = False)
@click.argument('backup', required = False)
@click.argument('share', required = False)
@click.argument('path', required = False, default = '')
def ls(host, backup, share, path):
	"""Lists hosts, backups, shares and paths"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	def format_time(t):
		return strftime('%Y-%m-%d %H:%M:%S', localtime(t // 1000000000))

	def format_interval(t):
		if t >= 86400000000000:
			d, s = divmod(t, 86400000000000)
			return '%dd%dh' % (d, s // 3600000000000)
		elif t >= 3600000000000:
			h, s = divmod(t, 3600000000000)
			return '%dh%dm' % (h, s // 60000000000)
		elif t >= 60000000000:
			m, s = divmod(t, 60000000000)
			return '%dm%ds' % (m, s // 60000000000)
		else:
			s, ns = divmod(t, 1000000000)
			if ns:
				return '%d.%02ds' % (s, ns // 10000000)
			else:
				return '%ds' % s

	map = ThreadPoolExecutor().map

	if host is None:
		def info(h):
			try:
				b = h[-1]
			except IndexError:
				return h.name,
			else:
				start_time = b.start_time
				time = format_time(b.start_time)
				duration = format_interval(b.end_time - start_time)
				level = b.level
				type = 'incr' if level else 'full'
				status = 'fail' if b.failed else 'done'
				return h.name, time, duration, b.index, type, level, status
		headings = ('Host name', 'Last backup', 'Duration', 'Index', 'Type', 'Level', 'Status')
		print(tabulate(map(info, fbak), headings = headings, alignment = {2:True}))
	elif backup is None:
		def info(b):
			start_time = b.start_time
			end_time = b.end_time
			start = format_time(start_time)
			end = format_time(end_time)
			duration = format_interval(end_time - start_time)
			level = b.level
			fullincr = 'incr' if level else 'full'
			status = 'fail' if b.failed else 'ok'
			return b.index, start, end, duration, fullincr, level, status
		headings = ('Index', 'Start', 'End', 'Duration', 'Type', 'Level', 'Status')
		print(tabulate(map(info, fbak[host]), headings = headings, alignment = {3:True}))
	elif share is None:
		def info(s):
			mountpoint = s.mountpoint
			start_time = s.start_time
			end_time = s.end_time
			start = format_time(start_time)
			end = format_time(end_time)
			duration = format_interval(end_time - start_time)
			status = 'fail' if s.error else 'done'
			status = s.error or 'done'
			return s.name, mountpoint, start, end, duration, status
		headings = ('Name', 'Mount point', 'Start', 'End', 'Duration', 'Status')
		print(tabulate(map(info, fbak[host][backup]), headings = headings, alignment = {4:True}))
	else:
		for dentry in fbak[host][backup][share].ls(path, parent = True):
			print(fsdecode(dentry.name))

@cli.command()
@click.argument('host')
@click.argument('backup')
@click.argument('share')
@click.argument('path')
def cat(host, backup, share, path):
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	dentry = fbak[host][backup][share][path]
	with fbak.pool.agent().readahead(dentry.digests) as reader:
		for action in reader:
			stdout.write(action.value)

@cli.command()
@click.argument('host')
@click.argument('backup')
@click.argument('share')
@click.argument('path')
def tar(host, backup, share, path):
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	share = fbak[host][backup][share]

	def iterator():
		for dentry in share.find(path):
			if dentry.is_file and not dentry.is_hardlink:
				yield from dentry.digests

	with fbak.pool.agent().readahead(iterator()) as reader:
		for dentry in share.find(path):
			i = TarInfo(fsdecode(bytes(dentry.name)))
			i.mode = dentry.mode & 0o7777
			i.uid = dentry.uid
			i.gid = dentry.gid
			i.mtime = dentry.mtime // 1000000000
			if dentry.is_hardlink:
				i.type = LNKTYPE
				i.linkname = fsdecode(bytes(dentry.hardlink))
			elif dentry.is_file:
				i.type = REGTYPE
				i.size = dentry.size
			elif dentry.is_symlink:
				i.type = SYMTYPE
				i.linkname = fsdecode(bytes(dentry.symlink))
			elif dentry.is_chardev:
				i.type = CHRTYPE
				i.devmajor = dentry.major
				i.devminor = dentry.minor
			elif dentry.is_blockdev:
				i.type = BLKTYPE
				i.devmajor = dentry.major
				i.devminor = dentry.minor
			elif dentry.is_directory:
				i.type = DIRTYPE
			elif dentry.is_fifo:
				i.type = FIFOTYPE
			else:
				continue

			stdout.write(i.tobuf(GNU_FORMAT))

			if dentry.is_file and not dentry.is_hardlink:
				for digest in dentry.digests:
					action = next(reader)
					if action.exception:
						raise action.exception
					stdout.write(action.value)
				padding = -i.size % BLOCKSIZE
				if padding:
					stdout.write(b'\0' * padding)

	stdout.write(b'\0' * (BLOCKSIZE*2))

@cli.command()
def pooltest():
	"""Run some tests on the pool code"""

	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))

	hashfunc = fbak.hashfunc

	def readahead():
		for i in range(200):
			yield hashfunc(str(i).encode())

	pool = fbak.pool
	agent = pool.agent()

	agent.put_chunk(hashfunc(b'foo'), b'foo', async = True)

	for i in range(200):
		data = str(i).encode()
		agent.put_chunk(hashfunc(data), data, async = True)

	agent.sync()

	reader = agent.readahead(readahead())

	print("get_chunk:", agent.get_chunk(hashfunc(b'foo')))

	action = agent.get_chunk(hashfunc(b'foo'), async = True)

	print("async get_chunk:", action.sync())

	print("derp")

	for action in reader:
		if action.exception:
			exceptiontype, exception, backtrace = action.exception
			raise exception
		print("readahead:", action.value)

	reader = None
	print(len(agent.readaheads))
	agent = None
	print(len(pool.agents))
	fbak = None

@cli.command()
def fstest():
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	data = "derp".encode()
	hashfunc = fbak.hashfunc
	fbak.pool.agent().put_chunk(hashfunc(data), data)
	del hashfunc
	del fbak
	sleep(1)

@cli.command()
def listchunks():
	fbak = Fruitbak(confdir = Path('/dev/shm/conf'))
	for hash in fbak.pool.agent().lister():
		print(hash)

@cli.command()
def xyzzy():
	"""Nothing happens"""

if __name__ == '__main__':
	# up from default 0.005s
	setswitchinterval(1)

	stdout = text_stdout.buffer

	cli()
