fruitbak
--------

Efficient disk based backups.

Implemented:

 - command line based backup
 - dedup
 - rsync backup method
 - configuration
 - command line based browsing
 - command line based tar restore
 - pluggable pool storage
 - compression
 - encryption
 - skip unchanged chunks
 - skip pool chunks already in reference backup
 - garbage collection
 - backup expiry
 - pluggable expiry methods
 - local backup method
 - pool scrubbing
 - shares: mountpoint < path < name
 - parallel backup job manager
 - pre/post-commands (per-backup, per-share)
 - generic excludes
 - implement wholefile by faking ENOENT
 - backups can be mounted using fuse

Initial goals:

 - transfer-specific includes/excludes
 - manpages for developers
 - manpages for users
 - fix class structure:
   - only inherited classes should be in subdirs
   - (Backup|Share)::(Read|Write) should be subclasses of (Backup|Share)
 - test suite
 - redirect logging (per-backup, per-share)
 - warning e-mails (fruitbak report)
 - report files that changed without the mtime being updated
 - implement config.d support
 - implement JSON config support
 - implement a scheme that combines configuration entries recursively
 - move all defaults to a config.d file
 - change [or => ...] configuration items into hashes
 - deprecate per-host excludes (should move to share/shares)

After that:

 - local restore method (fruitbak restore)
 - rsync restore method
 - tar and smb transfer methods
 - web based backup browsing
 - queued pool storage
 - pool chunk blacklisting
 - proper exception hierarchy
 - tutorials
 - local restore method

Later:

 - rsync3 transfer method
 - pluggable metadata storage
 - archiving
 - xattrs/acls
 - custom client
